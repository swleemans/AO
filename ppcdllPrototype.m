function [methodinfo,structs,enuminfo,ThunkLibName]=ppcdllPrototype
%PPCDLLPROTOTYPE Create structures to define interfaces found in 'ppcdll'.

%This function was generated by loadlibrary.m parser version 1.1.6.36 on Wed Jan  8 09:10:10 2014
%perl options:'ppcdll.i -outfile=ppcdllPrototype.m -thunkfile=ppcdll_thunk_pcwin64.c -header=ppcdll.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ppcdll_thunk_pcwin64');
%  long GetDrvSWRev ( unsigned long * SWRev ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='GetDrvSWRev'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  long GetSWRev ( unsigned long * SWRev ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='GetSWRev'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  long WriteReg ( unsigned long BrdNum , unsigned long RegOffset , unsigned long RegData ); 
fcns.thunkname{fcnNum}='longulongulongulongThunk';fcns.name{fcnNum}='WriteReg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long ReadReg ( unsigned long BrdNum , unsigned long RegOffset , unsigned long * Data ); 
fcns.thunkname{fcnNum}='longulongulongvoidPtrThunk';fcns.name{fcnNum}='ReadReg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
%  long ReadMem ( unsigned long BrdNum , unsigned long Addr , unsigned long IncAdd , unsigned long NumVal , unsigned long * Buffer ); 
fcns.thunkname{fcnNum}='longulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='ReadMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
%  long WriteMem ( unsigned long BrdNum , unsigned long Addr , unsigned long IncAdd , unsigned long NumVal , unsigned long * Buffer ); 
fcns.thunkname{fcnNum}='longulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='WriteMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
%  long SetBits ( unsigned long BrdNum , unsigned long Addr , unsigned long Data ); 
fcns.thunkname{fcnNum}='longulongulongulongThunk';fcns.name{fcnNum}='SetBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long ClearBits ( unsigned long BrdNum , unsigned long Addr , unsigned long Data ); 
fcns.thunkname{fcnNum}='longulongulongulongThunk';fcns.name{fcnNum}='ClearBits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long SetBitsWait ( unsigned long BrdNum , unsigned long Addr , unsigned long Data , unsigned long Timeout ); 
fcns.thunkname{fcnNum}='longulongulongulongulongThunk';fcns.name{fcnNum}='SetBitsWait'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long ClearBitsWait ( unsigned long BrdNum , unsigned long Addr , unsigned long Data , unsigned long Timeout ); 
fcns.thunkname{fcnNum}='longulongulongulongulongThunk';fcns.name{fcnNum}='ClearBitsWait'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long PPCInit (); 
fcns.thunkname{fcnNum}='longThunk';fcns.name{fcnNum}='PPCInit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void PPCCleanUp (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='PPCCleanUp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  long GetNumDevices ( short * NumDevices ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='GetNumDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'int16Ptr'};fcnNum=fcnNum+1;
%  long WriteConfigReg ( unsigned long BrdNum , unsigned long RegOffset , unsigned long RegData ); 
fcns.thunkname{fcnNum}='longulongulongulongThunk';fcns.name{fcnNum}='WriteConfigReg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long ReadConfigReg ( unsigned long BrdNum , unsigned long RegOffset , unsigned long * Data ); 
fcns.thunkname{fcnNum}='longulongulongvoidPtrThunk';fcns.name{fcnNum}='ReadConfigReg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
%  long WriteMemBurst ( unsigned long BrdNum , unsigned long Addr , unsigned long NumVal , unsigned long * Buffer ); 
fcns.thunkname{fcnNum}='longulongulongulongvoidPtrThunk';fcns.name{fcnNum}='WriteMemBurst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
%  long GetDriverInfo ( unsigned long BrdNum ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='GetDriverInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  long WriteRegNoMutex ( unsigned long BrdNum , unsigned long RegOffset , unsigned long RegData ); 
fcns.thunkname{fcnNum}='longulongulongulongThunk';fcns.name{fcnNum}='WriteRegNoMutex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long ReadRegNoMutex ( unsigned long BrdNum , unsigned long RegOffset , unsigned long * Data ); 
fcns.thunkname{fcnNum}='longulongulongvoidPtrThunk';fcns.name{fcnNum}='ReadRegNoMutex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
%  long AcquireMutex ( void ); 
fcns.thunkname{fcnNum}='longvoidThunk';fcns.name{fcnNum}='AcquireMutex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  long MutexRelease ( void ); 
fcns.thunkname{fcnNum}='longvoidThunk';fcns.name{fcnNum}='MutexRelease'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  long GetPCIAddress ( unsigned long BrdNum , unsigned long RegOffset , void ** RangeStart ); 
fcns.thunkname{fcnNum}='longulongulongvoidPtrThunk';fcns.name{fcnNum}='GetPCIAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'voidPtrPtr'};fcnNum=fcnNum+1;
methodinfo=fcns;